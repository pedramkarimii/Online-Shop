services:
  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    ports:
      - "6380:6379"
    networks:
      - main
    volumes:
      - ./volumes/redis/:/var/lib/redis/data/

  db:
    container_name: postgres
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=${DB_PORT}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./volumes/db/:/var/lib/postgresql/data/
    networks:
      - main
    depends_on:
      - redis

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    networks:
      - main
    volumes:
      - ./volumes/rabbitmq/:/var/lib/rabbitmq/data/
    depends_on:
      - redis

  celery-worker:
    image: celery:4
    container_name: celery-worker
    restart: always
    command: celery -A config worker -l info -force-root=True
    volumes:
      - ./apps:/code/apps
      - ./config:/code/config
      - ./utility:/code/utility
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - main

  app:
    build:
      context: .
      dockerfile: utility/Dockerfile
    container_name: app
    restart: always
    command: >
      sh -c "
        rm -rf db.sqlite3 && 
        find . -path '*/migrations/*.py' -not -name '__init__.py' -delete && 
        python manage.py wait_for_db &&
        python manage.py wait_for_redis &&
        python manage.py makemigrations --noinput && 
        python manage.py migrate --noinput && 
        python manage.py collectstatic --noinput &&
        python manage.py shell -c "
          from django.contrib.auth import get_user_model;
          User = get_user_model();
          User.objects.create_superuser(
            phone_number='09128355747',
            username='pedramkarimi',
            email='pedram.9060@gmail.com',
            password='qwertyQ@1'
          )
        \" && \
        gunicorn --bind 0.0.0.0:${API_PORT} config.wsgi:application --log-level ${API_LOG_LEVEL} --workers ${API_WORKERS} --threads ${API_THREADS} --access-logfile 'logs/backend.logs' --error-logfile 'logs/errors.logs'""
    volumes:
      - ./utility:/app/utility
      - ./logs/application/:/app/logs/
      - ./volumes/storage/:/app/storage/
    depends_on:
      - db
      - redis
      - rabbitmq
      - celery-worker
    networks:
      - main

  nginx:
    build:
      context: ./utility/nginx/
      dockerfile: Dockerfile
    restart: always
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./logs/nginx/:/var/log/nginx/
      - ./volumes/storage/:/shared/
      - ./utility/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./volumes/nginx/proxy_dhparams/:/vol/proxy/
      - ./volumes/certbot/www/:/vol/www/
      - ./volumes/certbot/certs/:/etc/letsencrypt/
      - ./utility/nginx/default-ssl.conf.template:/etc/nginx/default-ssl.conf.template
      - ./utility/nginx/default.conf.template:/etc/nginx/default.conf.template
      - ./utility/nginx/entrypoint.sh:/entrypoint.sh
    depends_on:
      - app

  certbot:
    build:
      context: ./utility/certbot/
      dockerfile: Dockerfile
    command: echo "Certbot | Skipping ..."
    volumes:
      - ./volumes/certbot/www/:/vol/www/
      - ./volumes/certbot/certs/:/etc/letsencrypt/
    depends_on:
      - nginx
      
networks:
  main:

